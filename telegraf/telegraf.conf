# Telegraf Configuration for Interactive Installation
#
# Collects system metrics and sends them to InfluxDB for monitoring
# the installation infrastructure (Zone Hubs, Control PC, Network)

# =============================================================================
# GLOBAL SETTINGS
# =============================================================================
[global_tags]
  # Installation identifier
  installation = "interactive_installation"
  environment = "production"

# =============================================================================
# AGENT CONFIGURATION
# =============================================================================
[agent]
  # Data collection interval
  interval = "5s"

  # Telegraf will send metrics in batches
  round_interval = true

  # Maximum batch size
  metric_batch_size = 1000

  # Maximum buffer size
  metric_buffer_limit = 10000

  # Collection jitter to prevent all agents from collecting at the same time
  collection_jitter = "5s"

  # Default flushing interval
  flush_interval = "10s"

  # Jitter the flush interval
  flush_jitter = "5s"

  # Override default hostname
  hostname = "control-pc-windows"

  # Don't omit hostname from data
  omit_hostname = false

# =============================================================================
# OUTPUT PLUGINS
# =============================================================================

# InfluxDB v2 output
[[outputs.influxdb_v2]]
  # InfluxDB Cloud instance URL
  urls = ["https://influx.g-sdn.com"]

  # Authentication token
  token = "QPUlR2LDEuhyDW2zheg-6OM39JRCZb3UyOaeRK-tI1GOlSI754rqS9pM435TabBETeUPp2yk1VqDlyZb69P0Fw=="

  # Organization and bucket
  organization = "interactiveInstallation"
  bucket = "system_metrics"

  # Data precision
  precision = "ns"

  # Connection timeout
  timeout = "20s"

  # HTTP headers
  [outputs.influxdb_v2.tagpass]
    # Only send metrics tagged for system monitoring
    metric_type = ["system", "performance", "network"]

# =============================================================================
# INPUT PLUGINS - SYSTEM METRICS
# =============================================================================

# System CPU metrics
[[inputs.cpu]]
  # Whether to report per-cpu stats or not
  percpu = true

  # Whether to report total system cpu stats or not
  totalcpu = true

  # If true, collect raw CPU time metrics
  collect_cpu_time = false

  # If true, compute and report the sum of all non-idle CPU states
  report_active = false

  [inputs.cpu.tags]
    metric_type = "system"
    device_category = "control_pc"

# System memory metrics
[[inputs.mem]]
  [inputs.mem.tags]
    metric_type = "system"
    device_category = "control_pc"

# Disk usage metrics
[[inputs.disk]]
  # Ignore mount points by filesystem type
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

  [inputs.disk.tags]
    metric_type = "system"
    device_category = "control_pc"

# Disk I/O metrics
[[inputs.diskio]]
  [inputs.diskio.tags]
    metric_type = "performance"
    device_category = "control_pc"

# System load metrics
[[inputs.system]]
  # Whether to report per-cpu stats or not
  fielddrop = ["uptime_format"]

  [inputs.system.tags]
    metric_type = "system"
    device_category = "control_pc"

# Network interface metrics
[[inputs.net]]
  # By default, telegraf gathers stats from any up interface (excluding loopback)
  interfaces = ["eth*", "wlan*", "wifi*"]

  [inputs.net.tags]
    metric_type = "network"
    device_category = "control_pc"

# Network statistics
[[inputs.netstat]]
  [inputs.netstat.tags]
    metric_type = "network"
    device_category = "control_pc"

# Process monitoring
[[inputs.procstat]]
  # Monitor Python processes (installation simulator)
  pattern = "python.*installation_sim"

  [inputs.procstat.tags]
    metric_type = "performance"
    device_category = "control_pc"
    process_type = "installation_simulator"

[[inputs.procstat]]
  # Monitor Python processes (InfluxDB bridge)
  pattern = "python.*influx_bridge"

  [inputs.procstat.tags]
    metric_type = "performance"
    device_category = "control_pc"
    process_type = "influx_bridge"

# =============================================================================
# INPUT PLUGINS - CUSTOM INSTALLATION METRICS
# =============================================================================

# HTTP response monitoring for InfluxDB health
[[inputs.http_response]]
  # InfluxDB health endpoint
  urls = ["https://influx.g-sdn.com/health"]

  # HTTP method
  method = "GET"

  # Response timeout
  response_timeout = "10s"

  # Expected response
  response_string_match = "\"status\":\"pass\""

  [inputs.http_response.tags]
    metric_type = "network"
    device_category = "external_services"
    service_name = "influxdb"

# Ping monitoring for network connectivity
[[inputs.ping]]
  # Hosts to ping
  urls = ["influx.g-sdn.com", "8.8.8.8"]

  # Number of pings to send
  count = 3

  # Ping timeout
  timeout = 5.0

  # Interface to send ping from (optional)
  # interface = "eth0"

  [inputs.ping.tags]
    metric_type = "network"
    device_category = "connectivity"

# =============================================================================
# INPUT PLUGINS - SIMULATED ZONE HUB METRICS
# =============================================================================

# Simulated microcontroller metrics using exec plugin
[[inputs.exec]]
  # Simulate ESP32/Arduino metrics for zone hubs
  commands = [
    "/usr/bin/python3 /mnt/c/Users/guill/Cloud/Documents/Gsdn/Development/InflulxDB/InteractivArtInstallation/simulate_zone_metrics.py"
  ]

  # Data format
  data_format = "influx"

  # Command timeout
  timeout = "10s"

  # Run interval (can be different from global interval)
  interval = "30s"

  [inputs.exec.tags]
    metric_type = "system"
    device_category = "zone_hubs"

# =============================================================================
# PROCESSOR PLUGINS (Optional data transformation)
# =============================================================================

# Add calculated fields
[[processors.converter]]
  # Convert bytes to MB for easier reading
  [processors.converter.fields]
    float = ["mem_used", "mem_available", "disk_used", "disk_free"]